---
layout: post
title:  "Blog 7: Terraform"
date:   2019-10-25 18:00:18 -0000
categories: jekyll update
---

<h3>Terraform</h3>

Terraform is a open source software with functionality of infrastructure as a code. Terraform allows to define infrastructure as a code: create resources, manage existing resources, or destroy those ones no longer needed. Terraform works with variety of cloud environments like AWS, Google Cloud, Azure, etc.

Terraform by HashiCorp uses own designed configuration language (HCL - HashiCorp Configuration Language). Optionally JSON can be used. The syntax of HCL consists of some basic elements: arguments, blocks, expressions. Blocks represent configuration of object (for example resource). Block has a body that may contain any number of arguments and nested blocks. Arguments assign values to names. Expressions represent values for arguments. Generalized form of block:

    block_type "block_label" "block_label" {
      #block_body
      IDENTIFIER = EXPRESSION #argument
      IDENTIFIER = EXPRESSION #argument
    }

Syntax for comments:

    # single line comment
    // single line comment (similar to #)
    /*...*/ multiple lines comment

Terraform available for multiple platforms: macOS, FreeBSD, Linux, OpenBSD, Solaris, Windows. User should choose appropriate package according to host OS.

For macOS users to install Terraform using terminal installation of Homebrew package needed.
* install Homebrew:

    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

* install Terraform:

    brew install Terraform

Terraform is ready for use after installation process is over.

To get help:

    terraform --help

Terraform upon appropriate command will execute all files with extension .tf that contained in the current directory.

Simple infrastructure configuration:

    provider "aws" {
      profile = "default"
      region = "us-west-1"
    }

    data "aws_ami" "ubuntu" {
      most_recent = true
    }

    resource "aws_instance" "web_server_apache2" {
      ami = "${data.aws_ami.ubuntu.id}"
      instance_type = "t2.micro"

    tags = {
      Name = "Apache2_web_server"
    }
  }

The configuration file example will work on AWS EC2 accounts (on default VPC). Configuration will create EC2 instance with Ubuntu OS. Created instance will function as web server in the future. The attribute "profile" refers to configuration file stored in ~/.aws/credentials (access keys are stored in the file).

To store credentials in configuration file (assuming that AWS CLI already installed on host machine) run:

  aws configure

The AWS CLI will request user input for AWS access key ID and AWS Secret key.
HashiCorp Terraform recommends never to store credentials into any *.tf files.



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

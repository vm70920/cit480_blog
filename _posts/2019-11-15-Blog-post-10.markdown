---
layout: post
title:  "Blog 10: Dynamic Inventory and SSH forwarding"
date:   2019-11-15 18:00:18 -0000
categories: jekyll update
---

<h2>Dynamic Inventory</h2>

Using dynamic inventories ansible discovers available ec2 instances and compares their ```tag_Name``` with specified in playbook. In case of match, ansible establish ssh connection to remote host (via ssh forwarding) and applies playbook to hosts. Out of two options to implement dynamic inventory (dynamic plugins and dynamic scripts) we used dynamic scripts: ec2.ini (configuration file) ec2.py (script). Download link: ```https://github.com/ansible/ansible/blob/devel/contrib/inventory/brook.py``` Store files in ```/etc/ansible/``` folder. Boto is an Amazon AWS SDK for python. Ansible internally uses Boto to connect to Amazon EC2 instances, thus we need Boto library in order to run Ansible on your laptop/desktop.

<h3>ec2.ini configuration file</h3>
Following changes needed in default configuration of ec2.ini:

  Uncomment following statement:

          hostname_variable = tag_Name

  This will allow to use ec2 variables (tag_Name)

  For server inside a VPC, using DNS names may not make sense. When an instance has ```subnet_id``` set, following variable is used. If the subnet is public, setting this to ```ip_address``` will return the public IP address. For instances in a private subnet, this should be set to ```private_ip_address```, and Ansible must be run from within EC2.

          vpc_destination-variable = private_ip_address

  To successfully make an API call to AWS, you will need to configure Boto (the Python interface to AWS). The AWS credentials file could be used as a config file. Uncomment and specify profile name "nova" used for credntials associated with pject infrastructure (aws profile contains access keys):

          boto_profile = nova

<h2>SSH forwarding</h2>

Following command allows ssh connection via bastion host to a server in private subnet:

          ssh -i /path/to/key ubuntu@ip_address -o "proxycommand ssh -W %h:%p -i /path/to/key ubuntu@ip_address"

Alternatively ssh **config** file can be modified:

          Host 10.0.4.62  //destination ip_address
            User ubuntu   //user
            IdentityFile ~/.ssh/id_rsa //path to key
            ProxyCommand ssh -q -W %h:%p 34.214.69.208 //proxycommand %h(host):%p(port) ip_address_bastion

          Host 10.0.5.193
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            ProxyCommand ssh -q -W %h:%p 34.214.69.208

          Host 34.214.69.208
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            Hostname 34.214.69.208
            ForwardAgent yes      //specifies if connection of current user will be forwareded to remote machine
            ControlMaster auto    //enables multiple sessions over single network connection
            ControlPath ~/.ssh/control-%%r@%%h:%%p  //path to location where to store control socket
            ControlPersist 5m //leaves master connection for specified time
            StrictHostKeyChecking no




[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
